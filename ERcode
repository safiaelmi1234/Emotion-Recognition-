import cv2
import numpy as np
import os 

recognizer = cv2.face.LBPHFaceRecognizer_create()
recognizer.read('trainer/trainer.yml')
cascadePath = "haarcascade_frontalface_default.xml"
faceCascade = cv2.CascadeClassifier(cascadePath);

font = cv2.FONT_HERSHEY_SIMPLEX

#iniciate id counter
id = 0

# Emotions related to ids: example ==> Happiness: id=0,  etc
names = ['Happiness', 'Anger', 'Sadness', 'Surprise', 'Neutral'] 

# Initialize and start realtime video capture
cam = cv2.VideoCapture(0)
cam.set(3, 640) # set video widht
cam.set(4, 480) # set video height

# Define min window size to be recognized as a face
minW = 0.1*cam.get(3)
minH = 0.1*cam.get(4)

ret, frame =cam.read()


gray = cv2.cvtColor(frame,cv2.COLOR_BGR2GRAY)

faces = faceCascade.detectMultiScale( 
    gray,
    scaleFactor = 1.2,
    minNeighbors = 5,
    minSize = (int(minW), int(minH)),
    )

for(x,y,w,h) in faces:

    cv2.rectangle(frame, (x,y), (x+w,y+h), (0,255,0), 2)

    id, confidence = recognizer.predict(gray[y:y+h,x:x+w])

    # Check if confidence is less than 100 ==> "0" is perfect match 
    if (confidence < 100):
        
        confidence = "  {0}%".format(round(100 - confidence))
        if names[id] == names[0]:
          print("Glad to see you happy, have an amazing day:)!")
        elif names[id] == names[1]:
          print("I notice that you're feeling angry, try to inhale for 4 seconds, hold your breath for 7 seconds and exhale for a count of 8 seconds. Repeat this cycle 3x.")
        elif names[id] == names[2]:
          print("It's okay to feel sad, keep pushing through...brighter days are ahead!")
        elif names[id] == names[3]:
          print("What are we surprised about?:0")
        elif names[id] == names[4]:
          print("I guess it's just one of those neutral kind of days... :/")
    
    else:
        id = "unknown"
        confidence = "  {0}%".format(round(100 - confidence))
    
    cv2.putText(frame, str(id), (x+5,y-5), font, 1, (255,255,255), 2)
    cv2.putText(frame, str(confidence), (x+5,y+h-5), font, 1, (255,255,0), 1)  




cam.release()
cv2.destroyAllWindows()
